#!/usr/bin/tclsh

# Unit tests for the exceptions package

package require tcltest
eval ::tcltest::configure $argv

lappend auto_path [file dirname [info script]]
package require exceptions
namespace import ::exceptions::*

namespace eval ::exceptions::test {
namespace import ::tcltest::*

test raise-1.0 {Test raise} -body {
	raise TestType "Message"
} -returnCodes error -result {TestType Message}

test raise-1.1 {Test erroneously raising TclBuiltInError} -body {
	raise TclBuiltInError "Bad error"
} -returnCodes error -result {FauxTclBuiltInError {Bad error}}

test try-1.0 {Test empty block} -body {
	try {}
} -returnCodes 0

test try-1.1 {Test simple command} -body {
	try {
		set x 42
	}
} -returnCodes 0 -result 42

test try-1.2 {Test return command} -body {
	try {
		return 42
	}
} -returnCodes 2 -result 42

test try-1.3 {Uncaught error} -body {
	try {
		raise TestError 42
	}
} -returnCodes 1 -result {TestError 42}

test try-1.4 {Negative: no args} -body {
	try
} -returnCodes 1 -match glob -result *

test try-1.5 {Negative: Too many args} -body {
	try {
		puts -nonewline "Try block"
	} { puts -nonewline "Something else" }
} -returnCodes 1 -match glob -output "" -result *

test try-catch-1.0 {Catch exact error} -body {
	try {
		raise TestError 42
	} catch -ex TestError {
		puts -nonewline "Caught"
	}
} -output Caught

test try-catch-1.1 {Catch glob error} -body {
	try {
		raise TestGlobError 42
	} catch -gl Test*Error {
		puts -nonewline "Caught"
	}
} -output Caught

test try-catch-1.2 {Catch regex error} -body {
	try {
		raise TestRegexError 42
	} catch -re {TestR[eg]*xError} {
		puts -nonewline "Caught"
	}
} -output Caught

test try-catch-1.3 {Catch all errors} -body {
	try {
		raise TestError 42
	} catch * {
		puts -nonewline "Caught"
	}
} -output Caught

test try-catch-1.4 {Catch built-in error} -body {
	try {
		error 42
	} catch -ex {TclBuiltInError} {
		puts -nonewline "Caught"
	}
} -output Caught

test try-catch-1.5 {Catch wrong error} -body {
	try {
		raise TestError 42
	} catch -ex {IncorrectError} {
		puts -nonewline "Caught"
	}
} -returnCodes 1 -result "TestError 42" -output ""

test try-catch-1.6 {Catch block determines final result} -body {
	try {
		raise TestError 42
	} catch * {
		set x CatchResult
	}
} -result CatchResult

test try-catch-1.7 {Catch first matching error} -body {
	try {
		raise TestError 42
	} catch TestError {
		puts -nonewline "Catch first"
	} catch * {
		puts -nonewline "Catch all"
	}
} -output "Catch first"

test try-catch-1.8 {Catch only matching error} -body {
	try {
		raise TestError 42
	} catch TestFalseError {
		puts -nonewline "Catch first"
	} catch TestError {
		puts -nonewline "Catch correct"
	} catch * {
		puts -nonewline "Catch all"
	}
} -output "Catch correct"

test try-catch-1.9 {Error in catch is propagated} -body {
	try {
		raise TestError 42
	} catch * {
		raise CatchError 56
	}
} -returnCodes 1 -output "" -result {CatchError 56}

test try-catch-1.10 {Built-in error in catch is translated} -body {
	try {
		raise TestError 42
	} catch * {
		error "Built-in catch error!"
	}
} -returnCodes 1 -output "" -result "TclBuiltInError {Built-in catch error!}"

test try-catch-1.11 {Catch error-type with leading hyphen} -body {
	try {
		raise -hyphenError 42
	} catch -- -hyphenError {
		puts -nonewline "Caught exception"
	}
} -returnCodes 0 -output "Caught exception" -match glob -result *

test try-catch-1.12 {Negative: missing all catch args} -body {
	try {
		puts -nonewline "Try block"
	} catch
} -returnCodes 1 -output "" -match glob -result *

test try-catch-1.13 {Negative: missing some catch args} -body {
	try {
		puts -nonewline "Try block"
	} catch {
		puts -nonewline "Catch block"
	}
} -returnCodes 1 -output "" -match glob -result *

test try-catch-1.14 {Negative: Bad catch option} -body {
	try {
		raise TestError 42
	} catch -special TestError {
		puts -nonewline "Caught exception"
	}
} -returnCodes 1 -output "" -match glob -result *

test try-catch-1.15 {Negative: Multi-line exception type} -body {
	try {} catch {
		BadException
	} {
		puts -nonewline "Catch block"
	}
} -returnCodes 1 -output "" -match glob -result *

test try-finally-1.0 {Finally block executed} -body {
	try {} finally {
		puts -nonewline "Finally executed"
	}
} -output "Finally executed"

test try-finally-1.1 {Finally block determines final result} -body {
	try {
		set x "Try Block Result"
	} finally {
		set x "Finally Result"
	}
} -result "Finally Result"

test try-finally-1.2 {Finally block executes after exception} -body {
	try {
		raise TestError 42
	} finally {
		puts -nonewline "Finally executed"
	}
} -returnCodes 1 -result "TestError 42" -output "Finally executed"

test try-finally-1.3 {Error in finally} -body {
	try {} finally {raise TestError 42}
} -returnCodes 1 -result "TestError 42"

test try-catch-finally-1.0 {Finally block after exception catch} -body {
	try {
		raise TestError 42
	} catch * {
		puts -nonewline "Exception caught; "
	} finally {
		puts -nonewline "Finally executed"
	}
} -output "Exception caught; Finally executed"

test try-catch-finally-1.1 {Finally after multi catches} -body {
	try {
		raise TestError 42
	} catch TestFalseError {
		puts -nonewline "Catch first"
	} catch TestError {
		puts -nonewline "Catch correct"
	} catch * {
		puts -nonewline "Catch all"
	} finally {
		puts -nonewline "; Finally executed"
	}
} -output "Catch correct; Finally executed"

test try-catch-finally-1.2 {Finally block after uncaught exception} -body {
	try {
		raise TestError 42
	} catch TestWrongError {
		puts -nonewline "Exception caught; "
	} finally {
		puts -nonewline "Finally executed"
	}
} -returnCodes 1 -result {TestError 42} -output "Finally executed"

test try-catch-finally-1.3 {Finally executes after error in catch} -body {
	try {
		raise TestError 42
	} catch * {
		raise CatchError 56
	} finally {
		puts -nonewline "Finally executed"
	}
} -returnCodes 1 -result {CatchError 56} -output "Finally executed"

test try-catch-finally-1.4 {Error in finally} -body {
	try {
		raise TestError 42
	} catch * {
		puts -nonewline "Catch block"
	} finally {
		raise FinallyError 73
	}
} -returnCodes 1 -result {FinallyError 73} -output "Catch block"

test try-catch-finally-1.5 {Finally error overwrites catch error} -body {
	try {
		raise TestError 42
	} catch * {
		raise TestError 56
	} finally {
		raise FinallyError 73
	}
} -returnCodes 1 -result {FinallyError 73}

test try-catch-finally-1.6 {Built-in error in finally is translated} -body {
	try {
		raise TestError 42
	} catch * {
		puts -nonewline "Catch block"
	} finally {
		error "Built-in finally error!"
	}
} -returnCodes 1 -result {TclBuiltInError {Built-in finally error!}} \
  -output "Catch block"

test try-catch-finally-1.7 {Finally block determines final result} -body {
	try {
		raise TestError 42
	} catch * {
		set x "Catch Result"
	} finally {
		set x "Finally Result"
	}
} -returnCodes 0 -result "Finally Result"

test try-catch-finally-1.8 {Negative: No args for finally} -body {
	try {
		puts -nonewline "Try block"
	} catch * {
		puts -nonewline "Catch block"
	} finally
} -returnCodes 1 -output "" -match glob -result *

test try-catch-finally-1.9 {Negative: Catch after finally} -body {
	try {
		puts -nonewline "Try block"
	} finally {
		puts -nonewline "Finally block"
	} catch * {
		puts -nonewline "Catch block"
	}
} -returnCodes 1 -output "" -match glob -result *

test clean_errorInfo-1.0 {Remove uplevel from try error call stack} -setup {
	set inf {hello world
    while executing
"raise hello world"
    (procedure "test2" line 3)
    invoked from within
"test2"
    ("uplevel" body line 2)
    invoked from within
"uplevel 1 $try_block"
    invoked from within
"try {
test2
}"}
} -body {
	puts [::exceptions::clean_errorInfo $inf]
} -output {hello world
    while executing
"raise hello world"
    (procedure "test2" line 3)
    invoked from within
"test2"
    ("try" body line 2)
    invoked from within
"try {
test2
}"
}

test clean_errorInfo-1.1 {Remove uplevel from catch error call stack} -setup {
	set inf {try...catch block failed with error:
Hello catch
    while executing
"raise Hello catch"
    (procedure "test2" line 2)
    invoked from within
"test2"
    ("uplevel" body line 2)
    invoked from within
"uplevel 1 [get_code_for_error $catch_list $error_type]"
    invoked from within
"try {
    test
} catch Hello {
    test2
}"}
} -body {
	puts [::exceptions::clean_errorInfo $inf catch]
} -output {try...catch block failed with error:
Hello catch
    while executing
"raise Hello catch"
    (procedure "test2" line 2)
    invoked from within
"test2"
    ("catch" body line 2)
    invoked from within
"try {
    test
} catch Hello {
    test2
}"
}

test clean_errorInfo-1.2 {Remove uplevel from finally error call stack} -setup {
	set inf {try...finally block failed with error:
Hello finally
    while executing
"raise Hello finally"
    ("uplevel" body line 2)
    invoked from within
"uplevel 1 $finally_block"
    invoked from within
"try {} finally {
    raise Hello finally
}"}
} -body {
	puts [::exceptions::clean_errorInfo $inf finally]
} -output {try...finally block failed with error:
Hello finally
    while executing
"raise Hello finally"
    ("finally" body line 2)
    invoked from within
"try {} finally {
    raise Hello finally
}"
}

cleanupTests

} ;# End namespace exceptions::test
namespace delete ::exceptions::test
